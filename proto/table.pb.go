// Code generated by protoc-gen-go.
// source: table.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	table.proto

It has these top-level messages:
	TableHeader
	IndexEntry
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TableHeader_Compression int32

const (
	TableHeader_NONE TableHeader_Compression = 0
	TableHeader_ZLIB TableHeader_Compression = 1
)

var TableHeader_Compression_name = map[int32]string{
	0: "NONE",
	1: "ZLIB",
}
var TableHeader_Compression_value = map[string]int32{
	"NONE": 0,
	"ZLIB": 1,
}

func (x TableHeader_Compression) String() string {
	return proto1.EnumName(TableHeader_Compression_name, int32(x))
}
func (TableHeader_Compression) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type TableHeader struct {
	// Verison number. MUST be 1.
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Compression used for the index.
	IndexCompression TableHeader_Compression `protobuf:"varint,2,opt,name=index_compression,json=indexCompression,enum=proto.TableHeader_Compression" json:"index_compression,omitempty"`
	// Length of the index data.
	IndexLength uint32 `protobuf:"varint,3,opt,name=index_length,json=indexLength" json:"index_length,omitempty"`
	// Number of index entries.
	IndexEntries uint32 `protobuf:"varint,4,opt,name=index_entries,json=indexEntries" json:"index_entries,omitempty"`
}

func (m *TableHeader) Reset()                    { *m = TableHeader{} }
func (m *TableHeader) String() string            { return proto1.CompactTextString(m) }
func (*TableHeader) ProtoMessage()               {}
func (*TableHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IndexEntry struct {
	// Key. Arbitrary array of up to 256 bytes.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Offset of value, relative to the start of the value section.
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Length of value.
	Length uint32 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	// Extra data associated with this entry.
	Extra []byte `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *IndexEntry) Reset()                    { *m = IndexEntry{} }
func (m *IndexEntry) String() string            { return proto1.CompactTextString(m) }
func (*IndexEntry) ProtoMessage()               {}
func (*IndexEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto1.RegisterType((*TableHeader)(nil), "proto.TableHeader")
	proto1.RegisterType((*IndexEntry)(nil), "proto.IndexEntry")
	proto1.RegisterEnum("proto.TableHeader_Compression", TableHeader_Compression_name, TableHeader_Compression_value)
}

func init() { proto1.RegisterFile("table.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x8d, 0xdd, 0x56, 0x99, 0xdd, 0x4a, 0x1c, 0x44, 0x72, 0x92, 0x76, 0xbd, 0xf4, 0xb4,
	0x07, 0xfd, 0x07, 0x4a, 0xc1, 0x62, 0xa9, 0x10, 0x3c, 0x79, 0x91, 0xad, 0x3b, 0xd5, 0xc5, 0x9a,
	0x94, 0x24, 0x48, 0xfb, 0x6b, 0xfd, 0x2b, 0x92, 0x49, 0x8b, 0xeb, 0x69, 0xe7, 0x7d, 0xbc, 0xf7,
	0x76, 0x26, 0x90, 0x87, 0x7a, 0xb9, 0xa6, 0x6a, 0xe3, 0x6c, 0xb0, 0xd8, 0xe7, 0x4f, 0xf9, 0x23,
	0x20, 0x7f, 0x8e, 0xf8, 0x81, 0xea, 0x86, 0x1c, 0x2a, 0x38, 0xf9, 0x26, 0xe7, 0x5b, 0x6b, 0x94,
	0x18, 0x89, 0xc9, 0x50, 0x1f, 0x24, 0x3e, 0xc2, 0x79, 0x6b, 0x1a, 0xda, 0xbe, 0xbe, 0xd9, 0xaf,
	0x8d, 0x23, 0xcf, 0x9e, 0xe3, 0x91, 0x98, 0x9c, 0xdd, 0x5c, 0xa5, 0xce, 0xaa, 0x53, 0x54, 0xdd,
	0xff, 0xb9, 0xb4, 0xe4, 0x60, 0x87, 0xe0, 0x18, 0x8a, 0x54, 0xb6, 0x26, 0xf3, 0x1e, 0x3e, 0x54,
	0x8f, 0xff, 0x95, 0x33, 0x9b, 0x33, 0xc2, 0x6b, 0x18, 0x26, 0x0b, 0x99, 0xe0, 0x5a, 0xf2, 0x2a,
	0x63, 0x4f, 0xca, 0x4d, 0x13, 0x2b, 0xc7, 0x90, 0x77, 0x6b, 0x4f, 0x21, 0x5b, 0x3c, 0x2d, 0xa6,
	0xf2, 0x28, 0x4e, 0x2f, 0xf3, 0xd9, 0x9d, 0x14, 0x65, 0x03, 0x30, 0x3b, 0x44, 0x76, 0x28, 0xa1,
	0xf7, 0x49, 0x3b, 0xbe, 0xad, 0xd0, 0x71, 0xc4, 0x4b, 0x18, 0xd8, 0xd5, 0xca, 0x53, 0xe0, 0x63,
	0x32, 0xbd, 0x57, 0x91, 0xff, 0x5b, 0x6e, 0xaf, 0xf0, 0x02, 0xfa, 0xb4, 0x0d, 0xae, 0xe6, 0x7d,
	0x0a, 0x9d, 0xc4, 0x72, 0xc0, 0x2f, 0x70, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xb5, 0xa0,
	0xb2, 0x64, 0x01, 0x00, 0x00,
}
